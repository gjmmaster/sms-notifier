Com certeza. Preparei um relatório técnico completo para o **Caminho do Protótipo Integrado**.

Este documento foi modelado a partir do `SNCT_Relatorio_Tecnico_Onboarding_v3.md` para manter a consistência, mas foi totalmente adaptado para descrever a arquitetura e os objetivos específicos do protótipo que discutimos.

-----

# Relatório Técnico: Serviço de Notificação por SMS (SNCT)

**ID do Documento:** ARQ-SNCT-IMPL-20250721-v1.1
**Data:** 21 de Julho de 2025
**Versão:** 1.1 (Foco na `Implementação V1 com Persistência`)
**Autor:** Gemini, Arquiteto de Sistemas

**Propósito deste Documento:** Este documento descreve a arquitetura e o funcionamento do serviço **`sms-notifier`**. Originalmente um protótipo, o serviço evoluiu para uma implementação robusta que inclui persistência de dados e integração com uma API de SMS real. O objetivo deste documento é servir como um guia técnico completo para a versão atual do serviço.

-----

## 1\. Resumo Executivo

O serviço `sms-notifier` é um componente essencial do Sistema de Notificação de Mudança de Categoria de Templates (SNCT). Ele opera em conjunto com o `notification-watcher` para entregar notificações proativas aos clientes via SMS quando a Meta (anteriormente Facebook) reclassifica seus templates de mensagem do WhatsApp.

A arquitetura atual é composta por:

  * **`notification-watcher`**: Serviço existente que monitora a API da Gupshup, detecta mudanças de categoria e as expõe através de um endpoint.
  * **`sms-notifier`**: O serviço documentado aqui. Ele consome os dados do `notification-watcher`, busca informações de contato de uma fonte de dados estática (configurada via variáveis de ambiente) e envia notificações por SMS através de uma API externa.

A principal evolução desde a fase de protótipo é a introdução de **persistência de dados** através de um banco de dados relacional. Isso garante que as notificações sejam processadas de forma **idempotente**, mesmo que o serviço seja reiniciado, prevenindo o envio de alertas duplicados.

Esta abordagem move o sistema de uma prova de conceito para uma solução pronta para produção.

-----

## 2\. Introdução e Escopo do Problema

O problema central que o `sms-notifier` resolve é a falta de notificação proativa para clientes quando a Meta reclassifica seus templates de mensagens do WhatsApp. Uma mudança de categoria (ex: de "UTILITY" para "MARKETING") pode ter implicações diretas de custo e conformidade.

O escopo desta implementação é:

1.  Consumir de forma confiável os dados de mudança de template fornecidos pelo `notification-watcher`.
2.  Mapear um identificador de conta (`wabaId`) para um contato telefônico de cliente usando uma fonte de dados estática.
3.  Enviar uma notificação por SMS para o contato correto através de uma API de mensagens externa.
4.  **Garantir a idempotência** do envio de notificações, utilizando um banco de dados para persistir o estado das notificações já enviadas. Isso previne o envio de múltiplos alertas para a mesma mudança de categoria.

-----

## 3\. Arquitetura Detalhada da Implementação

O sistema é composto por dois microsserviços, um banco de dados para persistência e uma API de SMS externa.

### 3.1. Componentes Principais

**3.1.1. `notification-watcher` (Serviço Dependência)**

  * **Responsabilidades:**
      * Monitora a API da Gupshup (em modo real ou mock).
      * Detecta mudanças de categoria.
      * Expõe um endpoint `GET /changed-templates` com a lista de templates alterados.
  * **Estado:** Sem estado persistente (`stateless`).

**3.1.2. `sms-notifier` (Serviço Principal)**

  * **Responsabilidades:**
      * Periodicamente (a cada 4 minutos), consulta o endpoint `/changed-templates` do `notification-watcher`.
      * Para cada template alterado recebido:
          * Constrói uma chave de notificação única (ex: `template-id_nova-categoria`).
          * **Verifica no cache em memória** se a chave já foi processada recentemente.
          * Se não estiver no cache, busca o contato do cliente (`telefone`) a partir de uma configuração estática (`MOCK_CUSTOMER_DATA`).
          * Se um contato é encontrado, formata a mensagem de alerta e a envia via integração com a **API de SMS externa**.
          * Se o envio for bem-sucedido, **salva a chave de notificação no banco de dados** para garantir idempotência em futuras execuções.
  * **Estado:** Mantém um cache em memória (`atom`) das chaves de notificação carregadas do banco de dados na inicialização. O estado autoritativo é o banco de dados.

### 3.2. Diagrama da Arquitetura da Implementação

```
+--------------------------------+      +--------------------------------+      +-----------------------+
|      API Provedor              |      |      notification-watcher      |      |      sms-notifier     |
|      (ex: Gupshup)             |<---->|  (Monitora API Gupshup)        |<---->|   (Processa e Envia)  |
+--------------------------------+      +--------------------------------+      +-----------------------+
                                                                                       |
                                                                                       |
                                              +----------------------------------------+
                                              |
                                              v
+--------------------------------+      +--------------------------------+
|      API de SMS Externa        |      |      Banco de Dados            |
|      (Envia Notificações)      |<---->|      (PostgreSQL)              |
+--------------------------------+      +--------------------------------+
                                        (Armazena chaves de idempotência)
```

### 3.3. Fluxo de Dados Detalhado

1.  **Inicialização:**
    a.  O `sms-notifier` é iniciado.
    b.  Ele se conecta ao banco de dados e carrega todas as chaves de notificação da tabela `sent_notifications` para um cache em memória (`atom`), garantindo uma checagem de idempotência rápida.

2.  **Ciclo de Processamento (executado a cada 4 minutos):**
    a.  O `sms-notifier` faz uma chamada `GET` para `http://<watcher-url>/changed-templates`.
    b.  Ele recebe uma lista JSON de templates alterados (ou uma lista vazia).
    c.  Para cada template na lista:
        i.  Cria uma chave única para a notificação (ex: `template-id_nova-categoria`).
        ii. **Verificação de Idempotência:** Ele primeiro consulta seu cache em memória. Se a chave for encontrada, a notificação é ignorada e o processo segue para o próximo template.
        iii. **Busca de Contato:** Se a chave é nova, ele busca o telefone de contato na variável de ambiente `MOCK_CUSTOMER_DATA` usando o `wabaId` do template.
        iv. **Envio de SMS:** Se um telefone é encontrado, o serviço formata a mensagem de alerta e faz uma chamada `POST` para a API de SMS externa.
        v.  **Persistência:** Se o envio do SMS for bem-sucedido (status `200 OK`), o serviço insere a chave de notificação na tabela `sent_notifications` do banco de dados e a adiciona ao cache em memória. Isso previne envios duplicados no futuro.

-----

## 4\. Pilha Tecnológica (Stack)

| Componente                | Tecnologia/Framework | Detalhes                                                              |
| ------------------------- | -------------------- | --------------------------------------------------------------------- |
| `notification-watcher`    | Clojure 1.11+        | `http-kit` (servidor), `clj-http` (cliente), `cheshire` (JSON)        |
| `sms-notifier`            | Clojure 1.11+        | `clj-http`, `cheshire`, `environ`, `clojure.java.jdbc`                |
| **Banco de Dados**        | PostgreSQL (ou similar) | Utilizado para persistir chaves de idempotência.                      |
| **Infraestrutura Comum**  | Leiningen, Java (JDK 11+), Docker | Ferramentas de build, runtime e orquestração.                 |

-----

## 5\. Configuração do Ambiente de Execução

**Pré-requisitos:** Java (JDK 11+), Leiningen, acesso a um banco de dados PostgreSQL.

**Passo 1: Configurar Variáveis de Ambiente**
A configuração do `sms-notifier` é feita exclusivamente por variáveis de ambiente.

```bash
# URL para encontrar o serviço notification-watcher
WATCHER_URL="http://localhost:8081" # Porta padrão do watcher

# String JSON contendo os dados de contato dos clientes
MOCK_CUSTOMER_DATA='{"waba_id_1": "+5511999998888", "waba_id_2": "+5521888887777"}'

# Configuração do Banco de Dados para persistência
DATABASE_URL="jdbc:postgresql://localhost:5432/sms_notifier_db?user=admin&password=secret"

# Credenciais para a API de envio de SMS
SMS_API_URL="https://api.sms_provider.com/send"
SMS_API_TOKEN="seu_token_de_api"
SMS_API_USER="seu_usuario_de_api"

# Porta onde o serviço sms-notifier irá rodar
PORT="8080"
```

**Passo 2: Preparar o Banco de Dados**
Antes de iniciar o serviço, certifique-se de que a tabela para armazenar as chaves de notificação exista.

```sql
CREATE TABLE IF NOT EXISTS sent_notifications (
    id SERIAL PRIMARY KEY,
    notification_key VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```

**Passo 3: Executar os Serviços**

1.  **Terminal 1 (`notification-watcher`):**
      * Navegue até o diretório do `notification-watcher`.
      * Configure as variáveis de ambiente necessárias para ele (ver documentação específica).
      * Execute `lein run`.
2.  **Terminal 2 (`sms-notifier`):**
      * Navegue até o diretório do `sms-notifier`.
      * Exporte as variáveis de ambiente listadas acima.
      * Execute `lein run`.

O serviço `sms-notifier` irá carregar as chaves do banco de dados, iniciar seu servidor web na porta `8080` e começar o ciclo de consulta ao `notification-watcher`.

-----

## 6\. Detalhes das APIs e Contratos

### 6.1. API Interna: `notification-watcher` -> `sms-notifier`

  * **Endpoint:** `GET /changed-templates`
  * **Fornecido por:** `notification-watcher`
  * **Consumido por:** `sms-notifier`
  * **Resposta (200 OK):** Um array JSON de objetos de template.
    ```json
    [
      {
        "id": "template_abc123",
        "elementName": "boas_vindas_premium",
        "wabaId": "waba_id_1",
        "category": "MARKETING",
        "oldCategory": "UTILITY",
        "status": "APPROVED",
        "language": "pt_BR"
      }
    ]
    ```

### 6.2. API Externa: `sms-notifier` -> Provedor de SMS

  * **Endpoint:** `POST /send` (Exemplo, depende do provedor)
  * **Fornecido por:** Provedor de SMS
  * **Consumido por:** `sms-notifier`
  * **Payload (Exemplo):**
    ```json
    {
      "user": "seu_usuario_de_api",
      "type": 2,
      "contact": [
        {
          "number": "+5511999998888",
          "message": "Alerta de Mudança de Categoria...",
          "externalid": "template_abc123"
        }
      ],
      "costcenter": 0,
      "fastsend": 0,
      "validate": 0
    }
    ```
  * **Resposta Esperada:** Um status `200 OK` com um corpo JSON indicando sucesso.

-----

## 7\. Considerações de Robustez e Escalabilidade

*   **Idempotência:** O uso do banco de dados para rastrear notificações enviadas é o pilar da robustez do sistema, prevenindo envios duplicados.
*   **Tratamento de Erros:** O código inclui blocos `try-catch` para lidar com falhas de conexão com o `notification-watcher` e com o banco de dados.
*   **Timeouts:** As chamadas HTTP para a API do `notification-watcher` e para a API de SMS possuem timeouts configurados (5 segundos para o watcher, 5 minutos para a API de SMS) para evitar que o serviço fique bloqueado.
*   **Escalabilidade:** Atualmente, o serviço opera em um modelo de *single instance*. Para escalar, seria necessário implementar um mecanismo de locking distribuído (ex: usando Redis ou locks a nível de banco de dados) para garantir que múltiplas instâncias não processem a mesma notificação simultaneamente.

-----

## 8\. Conclusão

O serviço `sms-notifier` representa uma evolução significativa do protótipo inicial. Ao incorporar persistência de dados e integração com serviços reais, ele se torna uma ferramenta confiável e robusta para a notificação de clientes. A documentação atual reflete essa maturidade e serve como um guia para a manutenção e futuras expansões do serviço.

**Fim do Documento**
