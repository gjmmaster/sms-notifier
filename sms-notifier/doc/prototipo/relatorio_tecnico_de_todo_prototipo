# Relatório Técnico: Serviço de Notificação Multicanal (SNCT)

**ID do Documento:** ARQ-SNCT-IMPL-20250731-v1.2
**Data:** 31 de Julho de 2025
**Versão:** 1.2 (Foco na Arquitetura Multicanal com SMS e Email)
**Autor:** Jules, Arquiteto de Sistemas

**Propósito deste Documento:** Este documento descreve a arquitetura e o funcionamento do serviço de notificação do SNCT. O serviço evoluiu de um protótipo focado em SMS para uma implementação robusta e multicanal que, por padrão, envia notificações via **SMS e Email**.

-----

## 1\. Resumo Executivo

O serviço de notificação é um componente essencial do Sistema de Notificação de Mudança de Categoria de Templates (SNCT). Ele opera em conjunto com o `notification-watcher` para entregar notificações proativas aos clientes quando a Meta reclassifica seus templates de mensagem do WhatsApp.

A arquitetura atual é composta por:

  * **`notification-watcher`**: Serviço existente que monitora e detecta mudanças de categoria.
  * **Serviço de Notificação (`sms-notifier`)**: O serviço documentado aqui. Ele consome os dados do `notification-watcher`, busca informações de contato multicanal (telefone, email) e envia notificações através de APIs externas de **SMS e Email**.

A principal evolução é a **arquitetura de canais**, que permite ao serviço enviar notificações por múltiplos meios de forma extensível, mantendo a **idempotência** através de um banco de dados.

-----

## 2\. Introdução e Escopo do Problema

O problema central resolvido é a falta de notificação proativa para clientes sobre mudanças de categoria de templates, que podem ter implicações de custo.

O escopo desta implementação é:

1.  Consumir de forma confiável os dados do `notification-watcher`.
2.  Mapear um `wabaId` a um **objeto de contato** contendo múltiplas informações (telefone, email).
3.  Enviar notificações para o contato correto através dos canais ativos (por padrão, **SMS e Email**).
4.  Garantir a **idempotência** do envio utilizando um banco de dados.

-----

## 3\. Arquitetura Detalhada da Implementação

O sistema é composto por um microsserviço de monitoramento, um microsserviço de notificação, um banco de dados e múltiplas APIs externas.

### 3.1. Componentes Principais

*   **`notification-watcher`**: Sem alterações. Monitora e expõe as mudanças.
*   **Serviço de Notificação (`sms-notifier`)**:
    *   **Responsabilidades:**
        *   Periodicamente, consulta o `notification-watcher`.
        *   Para cada mudança, busca o objeto de contato do cliente.
        *   Itera sobre os canais de notificação ativos (ex: SMS, Email).
        *   Para cada canal, formata e envia a mensagem através da API externa correspondente.
        *   Salva a chave da notificação no banco de dados para garantir idempotência.

### 3.2. Diagrama da Arquitetura da Implementação

```
+------------------------+      +--------------------------+      +-------------------------+
|      API Provedor      |      |   notification-watcher   |      |   Serviço de Notificação|
|      (ex: Gupshup)     |<---->| (Monitora API Gupshup)   |<---->|   (Processa e Envia)    |
+------------------------+      +--------------------------+      +-------------------------+
                                                                             |
                                              +------------------------------+------------------------------+
                                              |                                                             |
                                              v                                                             v
+------------------------+      +--------------------------+      +-------------------------+      +-------------------------+
|   API de SMS Externa   |<---->|                          |<---->|   API de Email Externa  |      |      Banco de Dados     |
| (Envia Notificações)   |      | (Armazena chaves         |      | (Envia Notificações)    |      |      (PostgreSQL)       |
+------------------------+      |  de idempotência)        |      +-------------------------+      +-------------------------+
                              +--------------------------+

```

### 3.3. Fluxo de Dados Detalhado

1.  **Inicialização:** O serviço carrega as chaves de idempotência do banco de dados para um cache em memória.
2.  **Ciclo de Processamento:**
    a.  Consulta o `notification-watcher`.
    b.  Para cada template alterado:
        i.  Cria uma chave de notificação única e verifica o cache.
        ii. **Busca de Contato:** Busca o **objeto de contato** completo (`{phone, email, ...}`).
        iii. **Envio Multicanal:** Se o contato for encontrado, o serviço itera sobre os canais ativos. Para cada um (SMS, Email), ele invoca a API externa correspondente com a mensagem apropriada.
        iv. **Persistência:** Se o ciclo de envio for concluído, a chave é salva no banco de dados.

-----

## 4\. Pilha Tecnológica (Stack)

| Componente                | Tecnologia/Framework | Detalhes                                                              |
| ------------------------- | -------------------- | --------------------------------------------------------------------- |
| `notification-watcher`    | Clojure 1.11+        | `http-kit`, `clj-http`, `cheshire`                                    |
| `sms-notifier`            | Clojure 1.11+        | `clj-http`, `cheshire`, `environ`, `clojure.java.jdbc`                |
| **Banco de Dados**        | PostgreSQL           | Persistência de chaves de idempotência.                               |
| **Infraestrutura Comum**  | Leiningen, Java, Docker | Build, runtime e orquestração.                                        |

-----

## 5\. Configuração do Ambiente de Execução

**Pré-requisitos:** Java (JDK 11+), Leiningen, acesso a um banco de dados PostgreSQL.

**Passo 1: Configurar Variáveis de Ambiente**

```bash
# --- Configurações Gerais ---
WATCHER_URL="http://localhost:8081"
DATABASE_URL="jdbc:postgresql://localhost:5432/sms_db?user=admin&password=secret"
PORT="8080"

# --- Dados de Contato (Estrutura de Objeto) ---
MOCK_CUSTOMER_DATA='{"waba_id_1": {"name": "Cliente A", "phone": "+5511999998888", "email": "cliente.a@example.com"}}'

# --- Credenciais do Canal de SMS ---
SMS_API_URL="https://api.sms_provider.com/send"
SMS_API_TOKEN="seu_token_de_api_sms"
SMS_API_USER="seu_usuario_de_api_sms"

# --- Credenciais do Canal de Email ---
EMAIL_API_URL="https://www.apiswagger.com.br/api/email/send_single_email_to_single_or_multiple_recipients"
EMAIL_API_TOKEN="seu_token_de_api_email"
EMAIL_API_USER="seu_usuario_de_api_email"
```

**Passo 2 e 3 (Preparar DB e Executar) permanecem os mesmos.**

-----

## 6\. Detalhes das APIs e Contratos

### 6.1. API Interna: `notification-watcher` -> Serviço de Notificação
*   Permanece inalterada (`GET /changed-templates`).

### 6.2. API Externa: Serviço de Notificação -> Provedor de SMS
*   Permanece inalterada.

### 6.3. API Externa: Serviço de Notificação -> Provedor de Email (Novo)
*   **Endpoint:** `POST /send_single_email_to_single_or_multiple_recipients` (Exemplo)
*   **Payload (Exemplo):**
    ```json
    {
      "user": "seu_usuario_de_api_email",
      "from_email": "noreplay@jmmaster.com",
      "from_name": "JM Master Group",
      "contact": [{
        "to_email": "cliente.a@example.com",
        "to_name": "Cliente A",
        "subject": "Alerta de Mudança de Categoria...",
        "externalid": "template_abc123"
      }],
      "body": "<h1>Alerta de Mudança de Categoria!</h1>..."
    }
    ```

-----

## 7\. Conclusão

O serviço de notificação evoluiu para uma plataforma multicanal robusta, aumentando o valor entregue aos clientes ao notificá-los por SMS e Email. A arquitetura baseada em protocolos garante que o serviço possa ser facilmente estendido no futuro para incluir novos canais de comunicação.
